.Welcome To Java Script Lets Deep Dyed Into It..
What is JS
JS is Dynamicaly typed scripting langauge Wich is use to craete web pages.
Dynamicaly means it create once & runs everywhere.it is case scensitive
It can use to Add Styles HTMl Code.
  --ECMA Script--
  it is Standard which can add JS. Basically it use to run JS programs in every computer.
  
  --Execute JS--
  it executes write once & runs everywhere. it is use to make interactive web pages.
  Node is help to JS Which can be runs on every machine...

  Code Can Be Written IN HTMl file which is encloed with script tag.
  <script>
  alert("hellow)
  </script>

  --Variables--
  It is use to store datatypes in JS.Basically it is a container which has multiple datatypes

    var is use to declare variables. but it is old techinique to declare variables in ES6(ECMA Script version 6) it is use 
    it causes bugs
    we use let

    -- let is use to declare variables it is blocked scope its limit is up to the block

    -- const is use to create identifire in constant which value cant be changed once declare
   
   -- Data Types --
   nn bb ss u 
   null,number,bignint,string,symbol,undefined

   -- Objects --
   It is non primitive datatypes.
   it is key value pair.which has one key & multiple values.
 
 -- Expression & Conditional Expons --
  more like same as c & C++
 -- Conditional 
 if, if else,if else if
    
   [ parseInt is use to convert string into integer ]

   -- Loops -- 
   for(let i=0;i<=5;i++){
    0 to i-1
    consol.log(i)
   }

   -- for in Loop
   for(let a in obj){
    consol.log(a)
    }
    -- for of Loop
    for(let a of "ASHIL")
    {
        consol.log(a)
    }
       
       -- While loop --
       Execute atleast 1 

       -- do while loop --

 -- Functios--
 use to seperation of logic it is black box which takes input & gives exact output.
Functio myfuction(){

}

-- Strings -- 
collecton of character 
 ` `  these are use for to show both are can be used ' " use to assign variables directly 
these is called string interpolation.
let boy1="promod"
let boy2="promod"
let sentance= `${boy2} is a friend of ${boy1}`

--Escape Sequance--

-- String Method -- 
-- Array --

< script >
it is use for seperation of cencern 


consel has many methods 

document.write

window Objects
window is global object & it has following objects
BOM-browers browers objet Model it additional object it provied additional objects

DOM-complete html page that page is called DOM object.
DOM has all the methdos that server needs.. like html page http & https 
request & responce.it has objects that can perfrom on server.
DOM shows a structure of document as tree format whatever we add styles for web pages
it will directly redirect through dom. it represnt HTMl & XML. & it stores as in tree format.
to access dom in progect use document.getElementById(id) it ll select dom elemets by id.
document.getElementById('myElement').innerText = 'New Content';

BOM-- BOM is collecton of objects. javascrit code intercat with broweser. 
BOM has several object like window object,navigator object,location object,history object
screen object,alert,conferm object & promt.

--Children Element--
whatever we declare in sepcific tag  it will called Children elemet.
head & body are children. both are siblings..

elemet.childNodes[0]===elemet.first.child is always true..
child nodes are look like array but it cant act as array

DOM elemet are not acceciable.it is readonly

$ are use to refer back Element

parentNode--it return document
parentElement-- it return null if false

- - Element Only Navigation - -
to use these in in  javascrpt use event listner to detect key press & navigate 
through a list of focusable element such as links,buttons,input fields.

Select Elements: Use querySelectorAll to select all focusable elements within the container.

Initial Focus: Set the focus to the first element initially.

Keydown Event Listener: Listen for keydown events to handle navigation.

Arrow Keys: Navigate forward (right/down) or backward (left/up) through the elements...
    

to change specific font color change use document.getElementById("nav")[0].firstElementChild.style.color="red"






- - Promise - -
promise  is an obejct Basically it represnt a evemt which is use to complete or failure
an asynchronious operation & its resulting value.
promices are us to handel asynchronious operations.
it has states methods..

Promises provide a powerful way to handle asynchronous operations in JavaScript, offering better readability 
and maintainability compared to traditional callbacks. They are an essential part of modern JavaScript, 
especially when dealing with asynchronous tasks like network requests, file reading, and other I/O operations

it has methods like 

then() - it all callback Functios for hadeing fulfilment & can chain multiple opertion
catch() - adds callback Function for handeling rejection
finally() - adds a callback function that is executed regardless of the prmices outcome

-- set interval --
it ll act on page relode. when we set page itll relode till that time that we declared

-- set timeout-- 
it allows a finction to writen till specific time

- - brower event - -
something taht happen like click  drag drop etc 
Dom event -- form event click event keyword event

- - Call Back - -
call back is nothing but copying the value & referance from memeory is called call back.

- - synchronous & asynchronous - -
sync are perfrom one after another.each operation must be complete befor next operation start.
async is perform without blocking the execution of subsequent peration.
it is use to remain the program in responsive mode.

invserion of control--
IC is a desgin pinciple in JavaScript Basically it shows the flow of program.
it show the cotrol of program.
suppose you want to do custome codoing in a progect that time it ll show the exact inverson of control.
it can be implemented in various ways--
 - Dependancy Injection
 - Call Back
 - Promices & Async/Await
 - Event Emitters
 These techniques help decouple components, making code more modular, flexible, and easier to test. 
 Understanding and leveraging IoC principles can significantly improve the architecture and maintainability of your JavaScript applications.

-- call back hell -- 

Callback hell, also known as "Pyramid of Doom," occurs in JavaScript when multiple nested callbacks are used, leading to code that is difficult to read and maintain. 
This often happens when performing asynchronous operations that depend on each other
there are some methods to perform call back hell - - it is aslo kown as Pyramid Dom..

Modularization
Named function
Promices 
Async /Await 

 
 .
 
- - promice chaining - -
Promise chaining is a technique in JavaScript where multiple asynchronous operations are executed in sequence. 
Each operation returns a promise, and the next operation is performed only after the previous promise is resolved. 
This helps in writing cleaner and more readable code compared to deeply nested callbacks (callback hell).

- - Async & Await both are keyword in javascrit it is used with promices.
it look asynchronious code & perfom like synchronous code.
both are imporved perforance &  maintainability readiability of code.
it removes nested call back hell & complex promice chain.

Async - - it is use to declare asynchronious function.& it automatically returns a promice
&  resolve value of the prmices & whatever the function return.

Await - - the keyword is used t pause the exicution of an async funtion util promis is reslved or rejected.it used inside the async function.

it allows eassy error handeling with try ... catch & it provides flexible environment for both sequential & concurant exicution of async operation.

How Promices API Work --
 Promice API provies a way to handel asynchronious operations more effectively.
 it can work on three stages -- 
 1 - Pending - it is initial stage. it nirher fullfill nor rejected .
 2 - FullFilled - The Operation completed Successfully .
 3 - Rejuected - The Operation is Rejected .
  1st we need to create promice 
  it can be creted using promice keyword. it can be created using promice constructure which takes a function
  that recives two argument 'resolve' & 'reject'.

  the promice consumed using 'then' , 'catch' & 'finally'.
then () - method is use to handel a fullfill promice.It takes two operation argument
a callback for fullfilled case & callback for rejected phase.

  catch () - it is use to handel a rejected promice Basically it can perfom on 
  .then(null,rejectionCallback).

  finally () - it does not recives any argument & it is usefull for cleanup operation.

try{
setTimeout()
} catch (){

}

we can throw custome errors also.
  creaeting promice using Promice ,resolve,rejcet.
  consuming promice using then(),catch() & finally()
  promice chaining  using then() for sequential asynchronous operations.
   Combining Promice using promice.all() to wait for multiple promice to resolve & promice.race().

Using .catch(),using .then() .catch() async / Await using try . . . catch & finally().

to fetch api in JavaScript we create fetch function & pass http url & further use .then & pass responce in it

to handel these request we use 
get, post, put ,delete requests